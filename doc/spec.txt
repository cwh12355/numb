grammar:

    expr → expr `as` fmt
    expr → expr `to` expr
    expr → expr op expr
    expr → expr <var expr>          ; implicit multiplication
    expr → `+` | `-` expr
    expr → `(` expr `)`
    expr → num
    expr → var
    expr → var `=` expr
    expr → var `(` args `)`         ; function call

    args → expr | args `,` expr

    op   → `+` | `-` | `*` ...
    fmt  → `dec` | `hex` | `oct` | `bin` | `rat` | `sci`

    num  → int | hex | oct | bin
    int  → [0-9]+
    hex  → `0x` [0-f]+
    oct  → `0o` [0-7]+
    bin  → `0b` [01]+
    var  → [^\s*/+-()=^]+ | `{` [^}]+ `}`

operators:

    +     addition
    -     subtraction
    *     multiplication
    /     division
    mod   modulo
    ^     exponent

    <<    shift left
    >>    shift right
    and   bitwise and
    or    bitwise or
    xor   bitwise xor

operator predecence (high to low):

    ^
    *  /  <<  >>  and  mod
    +  -  or  xor

formats:

    dec   decimal
    hex   hexadecimal
    oct   octal
    bin   binary
    rat   rational (x/y)
    sci   scientific (-1.23e+45)
