grammar:

    expr → expr `in` fmt
    expr → expr <var expr>         ; implicit multiplication
    expr → expr op expr
    expr → `+` | `-` expr
    expr → `(` expr `)`
    expr → num
    expr → var
    expr → id `=` expr
    expr → id `:` expr
    expr → id `(` args `)`         ; function call

    args → expr | args `,` expr

    op   → `+` | `-` | `*` | `to` ...

    id   → [^\s*/+-()=^:]+ | `{` [^}]+ `}`
    fmt  → [^\s]+

    num  → int | hex | oct | bin
    int  → [0-9]+
    hex  → `0x` [0-f]+
    oct  → `0o` [0-7]+
    bin  → `0b` [01]+

operators:

    +     addition
    -     subtraction
    *     multiplication
    /     division
    mod   modulo
    ^     exponent

    <<    shift left
    >>    shift right
    and   bitwise and
    or    bitwise or
    xor   bitwise xor

    =     assign (var)
    :     assign (unit)

    in    format number
    to    unit conversion

operator predecence (high to low):

    ^
    *  /  <<  >>  and  mod
    +  -  or  xor
    in to
    =  :

formats:

    dec   decimal
    hex   hexadecimal
    oct   octal
    bin   binary
    rat   rational (x/y)
    sci   scientific (-1.23e+45)
