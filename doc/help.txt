`numb` is a tool for working with numbers, units & date.

There are 3 available types: numbers & units & dates.

`Number` is a sequence of digits, for ex.:

	> 123

Spaces between digits are allowed:

	> 123 000

Floating point numbers are declared with `.` sign:

	> 123.45

The numbers support scientific notation, with exponentiation after `e`:

	> 1.23e10

You can declare hexadecimal, octal, binary integers (prefixed with `0x`, `0o`, `0b`):

	> 0xDEADBEEF
	> 0o1234567
	> 0b1010

Numbers support the operations listed below:

    +     addition
    -     subtraction
    *     multiplication
    /     division
    mod   modulo
    ^     exponent

    <<    shift left
    >>    shift right
    and   bitwise and
    or    bitwise or
    xor   bitwise xor

Numbers can be stored in variables:

    > sum = 100
    > avg = sum / 4

Numbers can be represented in different formats. `in` operator is used for that. It expects following names after the operator:

	dec   decimal
	rat   decimal in rational
	hex   hexadecimal
	oct   octal
	bin   binary
	sci   scientific

For ex.:

	> 123 in oct
	> 0b1001 xor 0b100 in hex
	> 1920/1080 in rat

`Unit` is a keyword:

    > kg
    > centimeter
    > kelvin

Numbers can be followed by units:

	> 123 kg

This is implicit multiplication, which is the same as:

	> 123 * kg

Units support following operations:

	+ - * /     with other unit
	* / ^       with numbers

For ex.:

	> 3 kg + 1 lbs
	> 10 m/s
	> 51 mole / 3

Just like numbers, units can be represented in different formats:

	> 10 kg in hex

To convert units, `to` operator is used:

	> 25 degC to degF
	> 5 m^2 to liter

`Date` can be declared within `{` and `}`:

	> {2020/03/06}
	> {1990.01.01 03:55}

The following formats are supported:

	{YYYY-MM-DD}
	{DD-MM-YYYY}
	{YYYY-MM-DDTHH:MM}
	{YYYY-MM-DD HH:MM}

'-', '/', '.' or ' ' (empty space) can be used as day/month/year separators:

	> {2010-01-01}
	> {2010 01 01}

Days/months don't have to be zero-padded:

	> {2010-1-1}

Month can be either a number (1-12) or short/long name (for ex.: Jan, January):

	> {2010/Jan/1}
	> {2010 January 1}

Certain keywords resolve to the current time (with local timezone):

	> now
	> time
	> date
	> today
	> tomorrow
	> yesterday

Dates can be subtracted from other dates, the result is time unit:

	> {2022/01/01} - {2020/01/01} to days

Dates can be added to or subtracted from other time units:

	> today - 5 days
	> now + 3 hours

Dates can be displayed in other timezones via `in` operator:

	> time in London

Timezone name can be full or partial:

	> time in newyork
	> time in New_York
	> time in America/New_York
